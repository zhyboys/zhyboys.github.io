(window.webpackJsonp=window.webpackJsonp||[]).push([[138],{556:function(a,t,s){"use strict";s.r(t);var r=s(42),_=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",[a._v("[TOC]")]),a._v(" "),s("h3",{attrs:{id:"类与对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类与对象"}},[a._v("#")]),a._v(" 类与对象")]),a._v(" "),s("h4",{attrs:{id:"类的修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类的修饰符"}},[a._v("#")]),a._v(" 类的修饰符")]),a._v(" "),s("p",[a._v("1.public可被任意对象访问")]),a._v(" "),s("p",[a._v("2.abstract抽象类，没有实现方法，需要子类提供方法的实现")]),a._v(" "),s("p",[a._v("3.final最终类或非继承类，不能被继承")]),a._v(" "),s("p",[a._v("4.缺省，只有在同包中才能使用该类")]),a._v(" "),s("h4",{attrs:{id:"成员变量修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#成员变量修饰符"}},[a._v("#")]),a._v(" 成员变量修饰符")]),a._v(" "),s("p",[a._v("1.public 公共访问控制符，可被任意对象访问")]),a._v(" "),s("p",[a._v("2.private  私有访问控制符，只允许自己的类的方法访问，子类也不能访问")]),a._v(" "),s("p",[a._v("3.protected  保护访问控制符 ，只允许他自己的类、子类、同一包中的类访问。")]),a._v(" "),s("p",[a._v("4.缺省  同一包中的其他类可以访问")]),a._v(" "),s("p",[a._v("5.final  最终修饰符，变量值不能改变。")]),a._v(" "),s("p",[a._v("6.static 静态修饰符，指定该变量被所有对象共享，所有的实例都可以使用该变量。")]),a._v(" "),s("h4",{attrs:{id:"成员方法修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#成员方法修饰符"}},[a._v("#")]),a._v(" 成员方法修饰符")]),a._v(" "),s("h4",{attrs:{id:"对象的创建及使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象的创建及使用"}},[a._v("#")]),a._v(" 对象的创建及使用")]),a._v(" "),s("h4",{attrs:{id:"参数的传递"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数的传递"}},[a._v("#")]),a._v(" 参数的传递")]),a._v(" "),s("p",[a._v("加了私有访问控制符该如何修改变量？")]),a._v(" "),s("h4",{attrs:{id:"有返回值的方法与没有返回值的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有返回值的方法与没有返回值的方法"}},[a._v("#")]),a._v(" 有返回值的方法与没有返回值的方法")]),a._v(" "),s("h4",{attrs:{id:"匿名对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匿名对象"}},[a._v("#")]),a._v(" 匿名对象")]),a._v(" "),s("h3",{attrs:{id:"java三大特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java三大特性"}},[a._v("#")]),a._v(" java三大特性")]),a._v(" "),s("h4",{attrs:{id:"_1-封装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-封装"}},[a._v("#")]),a._v(" 1.封装")]),a._v(" "),s("h4",{attrs:{id:"_2-继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-继承"}},[a._v("#")]),a._v(" 2.继承")]),a._v(" "),s("h4",{attrs:{id:"_3-多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-多态"}},[a._v("#")]),a._v(" 3.多态")]),a._v(" "),s("h5",{attrs:{id:"_1-方法的重载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-方法的重载"}},[a._v("#")]),a._v(" 1.方法的重载")]),a._v(" "),s("p",[a._v("方法的重载是实现多态的一种方法法，有一些方法的含义相同，但带有"),s("strong",[a._v("不同的参数")]),a._v("，这些方法使用"),s("strong",[a._v("相同的名字")])]),a._v(" "),s("h3",{attrs:{id:"构造方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造方法"}},[a._v("#")]),a._v(" 构造方法")]),a._v(" "),s("p",[a._v("1.如何从一个静态方法中调用另一个静态方法？")]),a._v(" "),s("p",[a._v("通过this关键词")]),a._v(" "),s("h3",{attrs:{id:"继承、抽象类、接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#继承、抽象类、接口"}},[a._v("#")]),a._v(" 继承、抽象类、接口")])])}),[],!1,null,null,null);t.default=_.exports}}]);