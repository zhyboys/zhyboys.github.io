(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{447:function(s,t,a){"use strict";a.r(t);var n=a(42),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[s._v("#")]),s._v(" 数据类型")]),s._v(" "),a("ol",[a("li",[s._v("静态数据，存于硬盘上的数据。")]),s._v(" "),a("li",[s._v("动态数据，有于内有上的数据。")])]),s._v(" "),a("p",[s._v("程序员最关心的是内存中的动态数据")]),s._v(" "),a("h3",{attrs:{id:"_01-数据分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_01-数据分类"}},[s._v("#")]),s._v(" 01 数据分类")]),s._v(" "),a("p",[s._v("Js中一共有6种数据类型")]),s._v(" "),a("ol",[a("li",[s._v("Number数值(基本数据类型)。")]),s._v(" "),a("li",[s._v("Sting字符（基本数据类型)。")]),s._v(" "),a("li",[s._v("Boolean 布尔（基本教据类型)。")]),s._v(" "),a("li",[s._v("Undefined未定义（基本数据类型)。")]),s._v(" "),a("li",[s._v("Null 空值 （基本数据类望)。")]),s._v(" "),a("li",[s._v("Object 对象 (引用数据类型)。")])]),s._v(" "),a("h3",{attrs:{id:"_02-检则数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_02-检则数据类型"}},[s._v("#")]),s._v(" 02 检则数据类型")]),s._v(" "),a("p",[s._v("格式：typeof 要检测的数据；\n例： "),a("code",[s._v("let res = typeof 123；")])]),s._v(" "),a("p",[a("strong",[s._v("注意点")]),s._v("\nundefined数据类型只有一种取值，那就是undefined。")]),s._v(" "),a("p",[s._v("前者是数据类型，原者星数据。")]),s._v(" "),a("h3",{attrs:{id:"_03-基本数据类型之间的转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_03-基本数据类型之间的转换"}},[s._v("#")]),s._v(" 03 基本数据类型之间的转换.")]),s._v(" "),a("h4",{attrs:{id:"转换为string类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转换为string类型"}},[s._v("#")]),s._v(" 转换为String类型")]),s._v(" "),a("ol",[a("li",[s._v("Number到 String")]),s._v(" "),a("li",[s._v("Boolean到String")]),s._v(" "),a("li",[s._v("undefined到String")]),s._v(" "),a("li",[s._v("Null到String")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("法1：使用toString方法，例")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" w "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("特点：以返回值的形式转换，不会影响到原来的数据的数据类型"),a("br"),s._v(" "),a("strong",[s._v("注意点")]),s._v("\n1. 不能使用常量直接调用toString()方法，因为常量是不能被的改变的。\n例如 "),a("code",[s._v("123.toString()")]),s._v(" 会报错。\n2. 法一只适用于 1和2两种转换，否则会报错，报错例子：")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" valuel"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//不会报错")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" Serl"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("Valuel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//会报错")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" value2"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//不会报错")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" Sw2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Value2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//会报错")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    \n- 法2：使用Sting(常量or变量)\n    例：\n    ```JavaScript\n    let value1 = undefined;\n    let str1 = Stringvalue1);//成功\n    let value2= nall\n    let str2 =Strig(value2); //成功\n    ```\n法2与法一相比，可直接转常量为字符串，还可直接转null和undefined为字符串\n\n- 法3：变量or常量+“ “  /  变量or常量+' '\n\n#### 转换为Number类型\n\n1. 将String类型转换为Number类型。\n2. 将Boolean类型转换为Number类型。\n3. 将undefined类型转换为Number类型\n4. 将null类型转换为Number类型。\n\n- 法1：使用Number(变量or常量)\n   ```javascript\n   let str = \"123\";\n   let num = Number(str);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("p",[a("strong",[s._v("注意点")])]),s._v(" "),a("ol",[a("li",[a("p",[s._v("如果字符串中没有数据，那么转换的结果是0.")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//无内容，转换后是0 ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"  "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//空格，转换后是0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v('let str = "我";')]),s._v("，转换后结果是NaN.")])]),s._v(" "),a("li",[a("p",[s._v("如果是布尔类型的true，转换后结果是1.")])]),s._v(" "),a("li",[a("p",[s._v("如果是布尔类型的false，转换后结果是0.")])]),s._v(" "),a("li",[a("p",[s._v("如果是空类型，转换后结果是0，")])]),s._v(" "),a("li",[a("p",[s._v("如果是未定义类型，转换后结果是NaN。\n"),a("strong",[s._v("总结")])])]),s._v(" "),a("li",[a("p",[s._v("空字符串（含和不含空格）、布尔类型false、空类型，转换为数字类型后为0.")])]),s._v(" "),a("li",[a("p",[s._v("布尔类型true转换为数字类型后为1.")])]),s._v(" "),a("li",[a("p",[s._v("非空字符串、未定义类型转换为数字后为NaN。")])])]),s._v(" "),a("ul",[a("li",[s._v("法2：通过数学运算中的“+”或“-”来转换。"),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"123"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" num1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" num2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//正负号发生改变。")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ul",[a("li",[s._v("本质上，“+”或“-”转换就是调用了Number（）函数。")]),s._v(" "),a("li",[s._v("变量，常量，null，undefined都可以转换。")])])])]),s._v(" "),a("p",[s._v("法1（通过Number（））和法2（通过“+”和“-”）都有一个明显的缺点，那就是对于“123我是”的字符串只能转换为number类型的NaN，而不能提取数字。")]),s._v(" "),a("ul",[a("li",[s._v("法3通过parseInt(需要转换的字符串)转换")]),s._v(" "),a("li",[s._v("法3通过parseFloat(需要转换的字符串)转换"),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3.14是圆周率"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" num1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//3")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" num2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseFloat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//3.14")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("strong",[s._v("注意点")]),s._v(" "),a("ol",[a("li",[s._v("parseInt/parseFloat都会从左到右提取数值，一旦遇到非数值就会停止。")]),s._v(" "),a("li",[s._v("如果第一个字符就是非数字，提取就停止了，那么就会返回NaN。"),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a3.14"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//返回NaN")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("li",[s._v("parseInt/parseFloat都会将传入的数据当成字符串处理，例如传入的是false和true就会当成字符串转化为NaN，而不会转换为0和1。"),a("code",[s._v('parseInt("true");')]),s._v("和"),a("code",[s._v("parseInt(true);")]),s._v("等价转为NaN。")])])])]),s._v(" "),a("h4",{attrs:{id:"转换为布尔类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转换为布尔类型"}},[s._v("#")]),s._v(" 转换为布尔类型")]),s._v(" "),a("ol",[a("li",[s._v("将String转换为Boolean类型。")]),s._v(" "),a("li",[s._v("将Number转换为Boolean类型。")]),s._v(" "),a("li",[s._v("将undefined转换为Boolean类型。")]),s._v(" "),a("li",[s._v("将null转换为Boolean类型。\n方法：调用Boolean(变量or常量);")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"123"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"   "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//false")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[a("strong",[s._v("总结：")])]),s._v(" "),a("ol",[a("li",[s._v("只要字符串中有内容（空格也算内容），就会转换为true。")]),s._v(" "),a("li",[s._v("只要数字不是0就会转换为true。")]),s._v(" "),a("li",[s._v("NaN也是number类型，但会转换为false。")]),s._v(" "),a("li",[s._v("null和undefined也会转换为false。\n"),a("strong",[s._v("再总结")])]),s._v(" "),a("li",[s._v("空字符串（不含空格） / 0 / NaN / null / undefined 都会转换为false，其余都会转换为true。")])])])}),[],!1,null,null,null);t.default=e.exports}}]);