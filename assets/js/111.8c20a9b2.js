(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{526:function(s,t,i){"use strict";i.r(t);var n=i(42),a=Object(n.a)({},(function(){var s=this,t=s.$createElement,i=s._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[i("h2",{attrs:{id:"单人使用"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#单人使用"}},[s._v("#")]),s._v(" 单人使用")]),s._v(" "),i("h3",{attrs:{id:"_01-本地使用"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_01-本地使用"}},[s._v("#")]),s._v(" 01 本地使用")]),s._v(" "),i("ol",[i("li",[s._v("在工作区下打开git终端输入"),i("code",[s._v("git init")]),s._v("初始化，创建版本库（.git文件夹）。")]),s._v(" "),i("li",[i("code",[s._v("git config -l")]),s._v("查看所有git的配置，这写配置我们不需要更改，但我们需要新增两项内容。")])]),s._v(" "),i("div",{staticClass:"language- line-numbers-mode"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[s._v('单人流程:\n    一、准备工作(只做一次):\n    1.创建一个工作区\n   2.在工作区中的打开git终端\n   3.通过git init指令, 初始化版本库\n   4.通过git config user.name "姓名"\n         git config user.email "邮箱"\n         目的是知道哪些代码是谁提交的以及联系方式\n     设置用户名和邮箱(不设置要挨骂)\n   5.通过git config -l查看设置情况\n   二、开发阶段(反复执行)\n   1.编写代码\n   2.通过"git add 文件名称" / "git add ." 添加到版本库的暂缓区中\n   3.通过git commit -m"说明" 将暂缓区的文件添加到HEAD指针指向的分支中\n   (默认只有一个分支, master分支, 也称之为主分支)\n   注意点:\n   1.不是写一句代码就add commit一次, 应该是完成一个功能后再add commit\n   2.commit时-m注释一定要认真编写, 与当前提交内容保持一致, 否则要挨骂\n\n单人使用Git管理项目好处:\n    1.可以通过git status查看哪些文件没有被管理, 修改了哪些文件\n      红色(没有被管理或者被修改了)、绿色(在暂缓区)\n    2.可以通过 git diff 文件名 查看具体修改了哪些代码，得在提交到缓冲区之前看。\n    3.可以通过git log / git reflog查看项目演变历史\n   4.可以通过git reset --hard 版本号  在任意版本之间切换\n   5.无需备份多个文件, 每次commit提交Git会自动备份\n')])]),s._v(" "),i("div",{staticClass:"line-numbers-wrapper"},[i("span",{staticClass:"line-number"},[s._v("1")]),i("br"),i("span",{staticClass:"line-number"},[s._v("2")]),i("br"),i("span",{staticClass:"line-number"},[s._v("3")]),i("br"),i("span",{staticClass:"line-number"},[s._v("4")]),i("br"),i("span",{staticClass:"line-number"},[s._v("5")]),i("br"),i("span",{staticClass:"line-number"},[s._v("6")]),i("br"),i("span",{staticClass:"line-number"},[s._v("7")]),i("br"),i("span",{staticClass:"line-number"},[s._v("8")]),i("br"),i("span",{staticClass:"line-number"},[s._v("9")]),i("br"),i("span",{staticClass:"line-number"},[s._v("10")]),i("br"),i("span",{staticClass:"line-number"},[s._v("11")]),i("br"),i("span",{staticClass:"line-number"},[s._v("12")]),i("br"),i("span",{staticClass:"line-number"},[s._v("13")]),i("br"),i("span",{staticClass:"line-number"},[s._v("14")]),i("br"),i("span",{staticClass:"line-number"},[s._v("15")]),i("br"),i("span",{staticClass:"line-number"},[s._v("16")]),i("br"),i("span",{staticClass:"line-number"},[s._v("17")]),i("br"),i("span",{staticClass:"line-number"},[s._v("18")]),i("br"),i("span",{staticClass:"line-number"},[s._v("19")]),i("br"),i("span",{staticClass:"line-number"},[s._v("20")]),i("br"),i("span",{staticClass:"line-number"},[s._v("21")]),i("br"),i("span",{staticClass:"line-number"},[s._v("22")]),i("br"),i("span",{staticClass:"line-number"},[s._v("23")]),i("br"),i("span",{staticClass:"line-number"},[s._v("24")]),i("br"),i("span",{staticClass:"line-number"},[s._v("25")]),i("br"),i("span",{staticClass:"line-number"},[s._v("26")]),i("br")])]),i("ol",[i("li",[i("code",[s._v("git status")]),s._v("查看那些文件被添加到了暂缓区（绿色），哪些文件没被添加（红色）。如果一个文件也没输出，说明所有文件已经被git管理了（可能已经提交到了master）。")]),s._v(" "),i("li",[s._v('通过"git add 文件名称" / "git add ." 添加到版本库的暂缓区中。')]),s._v(" "),i("li",[s._v("通过"),i("code",[s._v('git commit -m"说明"')]),s._v("将暂缓区的文件添加到HEAD指针指向的分支中，注意后面要写说明。\n(默认只有一个分支, master分支, 也称之为主分支)")]),s._v(" "),i("li",[s._v("^可表示上个版本（版本号）。")])]),s._v(" "),i("h3",{attrs:{id:"_02-github"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_02-github"}},[s._v("#")]),s._v(" 02 GitHub")]),s._v(" "),i("p",[s._v("注意：打开git bush here必须在工作区下打开。")]),s._v(" "),i("ol",[i("li",[s._v("随便找个文件夹"),i("code",[s._v("git clone 地址")]),s._v("就可以下载仓库代码，地址在仓库右上角。")]),s._v(" "),i("li",[s._v("上传"),i("code",[s._v("git push 地址")]),s._v("就可以上传到仓库，但是一般不用这种方法，需要输入用户名密码（权限管理），这是通过HTTPS的方式进行上传的。一般使用SSH方式。")]),s._v(" "),i("li",[s._v("SSH公钥的使用：\n"),i("ol",[i("li",[s._v("随便找个文件夹git bush here")]),s._v(" "),i("li",[i("strong",[s._v("码云同样适用")]),s._v("输入命令"),i("code",[s._v('ssh-keygen -t rsa -C "2625402133@qq.com"')]),s._v("，最后是自己的邮箱地址。")]),s._v(" "),i("li",[s._v("输入命令后需要敲击三次回撤键。")]),s._v(" "),i("li",[i("code",[s._v("C:\\Users\\26254\\.ssh")]),s._v("就下载好了，其中"),i("code",[s._v("id_rsa")]),s._v("是私钥，"),i("code",[s._v("id_rsa.pub")]),s._v("是公钥。")]),s._v(" "),i("li",[s._v("再在刚刚打开的终端工具输入指令"),i("code",[s._v("cat ~/.ssh/id_rsa.pub")]),s._v("会打印出公钥内容。")]),s._v(" "),i("li",[s._v("复制公钥内容，注意不能多复制空格。")]),s._v(" "),i("li",[s._v("在GitHub中找到setting，找到SSH and GPG keys。")]),s._v(" "),i("li",[s._v("点击new SSH key表示新建ssh key。")]),s._v(" "),i("li",[s._v("标题随便写")]),s._v(" "),i("li",[s._v("key复制过去，然后点击add。")]),s._v(" "),i("li",[s._v("再在终端中输入指令"),i("code",[s._v("ssh -T git@github.com")]),s._v("，如果是码云就是指令"),i("code",[s._v("ssh -T git@gitee.com")]),s._v("。")]),s._v(" "),i("li",[s._v("终端问yes or no")]),s._v(" "),i("li",[s._v("yes")]),s._v(" "),i("li",[s._v("显示XXX  success  XXX就成功了。")])])]),s._v(" "),i("li",[s._v("克隆和上传依然像上面一样，只不过"),i("code",[s._v("git push 地址")]),s._v("中的地址需要在仓库右上角找SSH地址。")]),s._v(" "),i("li",[s._v("以后就可以提交，下载来去自如了。")])])])}),[],!1,null,null,null);t.default=a.exports}}]);